# задаёт пользователя и группу, с правами которого будут работать рабочие процессы
user nginx nginx;

# задаёт число рабочих процессов
worker_processes auto;

# конфигурирует запись в лог
error_log /var/log/nginx/error.log warn;

# уменьшает разрешение таймеров времени в рабочих процессах
timer_resolution 100ms;

events {
    # задаёт метод, используемый для обработки соединений
    use epoll;

    # задаёт максимальное число соединений, которые одновременно может открыть рабочий процесс
    worker_connections 1024;

    # рабочий процесс за один раз будет принимать сразу все новые соединения
    multi_accept on;
}

http {

    # задаёт формат лога
    log_format main escape=none
        'time="$time_local" '
        'referer="$http_referer" '
        'remote_addr="$remote_addr" '
        'user_agent="$http_user_agent" '
        'method="$request_method" '
        'protocol="$request" '
        'request_length="$request_length" '
        'request_time="$request_time" '
        'response_code="$status" '
        'request_id="$upstream_http_x_request_id" '
    ;

    # задаёт путь, формат и настройки буферизованной записи в лог
    access_log /var/log/nginx/access.log main;

    # игнорирует поля заголовка с недопустимыми именами
    ignore_invalid_headers on;

    # запрещает keep-alive соединения с некорректно ведущими себя браузерами
    keepalive_disable none;

    # максимальное число запросов, которые можно сделать по одному keep-alive соединению
    keepalive_requests 256;

    # задаёт таймаут, в течение которого keep-alive соединение с клиентом не будет закрыто
    keepalive_timeout 30s;

    # задаёт максимальное число и размер буферов для чтения большого заголовка запроса клиента
    large_client_header_buffers 4 4k;

    # разрешает или запрещает сброс соединений по таймауту
    reset_timedout_connection on;

    # задаёт таймаут при передаче ответа клиенту
    send_timeout 2s;

    # задаёт таймаут при чтении тела запроса клиента
    client_body_timeout 5s;

    # задаёт таймаут при чтении заголовка запроса клиента
    client_header_timeout 5s;

    # задаёт максимально допустимый размер тела запроса клиента
    client_max_body_size 1k;

    # разрешает или запрещает использовать sendfile
    sendfile on;

    # разрешает использование параметра сокета TCP_NOPUSH во FreeBSD или TCP_CORK в Linux
    tcp_nopush on;

    # разрешает использование параметра TCP_NODELAY
    tcp_nodelay on;

    # разрешает использование файлового асинхронного ввода-вывода (AIO) во FreeBSD и Linux
    aio on;

    # Задаёт MIME-тип ответов по умолчанию
    default_type application/json;

    # запрещает использование символов подчёркивания в полях заголовка запроса клиента
    underscores_in_headers off;

    # запрещает выдавать версию nginx’а на страницах ошибок и в поле “Server” заголовка ответа
    server_tokens off;

    # задаёт размер буфера, используемого для хранения тела ответа подзапроса
    subrequest_output_buffer_size 2k;

    # запрещает автоматическую генерацию поля “ETag” заголовка ответа для статических ресурсов
    etag off;

    # запрещает вывод листинга каталога
    autoindex off;

    # запрещает указывать порт в абсолютных перенаправлениях, выдаваемых nginx’ом
    port_in_redirect off;

    # определяет максимальное количество файлов, информация о которых будет содержаться в кеше
    open_file_cache max=200000 inactive=20s;

    # определяет через какое время информация будет удалена из кеша
    open_file_cache_valid 30s;

    # будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
    open_file_cache_min_uses 2;

    # будет кешировать информацию об отсутствующих файлах
    open_file_cache_errors on;

    # разрешает сжатие ответа методом gzip
    gzip on;

    # устанавливает минимальную длину ответа, который будет сжиматься методом gzip
    gzip_min_length 512;

    # устанавливает степень сжатия ответа методом gzip
    gzip_comp_level 1;

    # разрешает выдавать в ответе поле заголовка “Vary: Accept-Encoding”
    gzip_vary on;

    # запрещает сжатие ответа методом gzip для запросов с полями заголовка “User-Agent”,
    # совпадающими с заданными регулярными выражениями
    gzip_disable msie6;

    # разрешает сжатие ответа методом gzip для указанных MIME-типов
    gzip_types application/json;

    # заголовки безопасности
    add_header X-XSS-Protection          '1; mode=block'                            always;
    add_header X-Content-Type-Options    'nosniff'                                  always;
    add_header Referrer-Policy           'no-referrer-when-downgrade'               always;
    add_header Strict-Transport-Security 'max-age=1024; includeSubDomains; preload' always;
    add_header Content-Security-Policy   'upgrade-insecure-requests'                always;

    # задаёт таймаут для установления соединения с проксированным сервером
    proxy_connect_timeout 5s;

    # задает таймаут при чтении ответа проксированного сервера
    proxy_read_timeout 30s;

    # разрешает передавать от проксируемого сервера клиенту запрещённые для передачи заголоки
    proxy_pass_header Server;

    # добавляем поля заголовка запроса, передаваемые проксируемому серверу
    proxy_set_header Host             $http_host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Request-Id     $request_id;
    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;

    # запрещает использовать буферизацию ответов проксируемого сервера
    proxy_buffering off;

    # запрещает использовать буферизацию тела запроса клиента
    proxy_request_buffering off;

    # запрещаем редиректы
    proxy_redirect off;

    server {
        # задаёт адрес и порт для IP на которых сервер будет принимать запросы
        listen 80 default_server;

        # задаёт имена виртуального сервера
        server_name 'vertical';

        # запрещает использовать в абсолютных перенаправлениях, выдаваемых nginx’ом
        server_name_in_redirect off;

        # задаёт URI, который будет показываться для указанных ошибок
        error_page 500 502 503 504 =500 /5xx.json;

        location / {

            # задаёт протокол и адрес проксируемого сервера
            proxy_pass http://vertical_api:8080/;

            # задаёт текст, который нужно изменить в заголовках “Location” и “Refresh”
            proxy_redirect / /api/v1/;
        }

        location /5xx.json {

            # добавляем поля заголовка запроса, передаваемые проксируемому серверу
            add_header X-Request-ID $request_id always;

            # завершает обработку и возвращает клиенту указанный код
            return 500 '{"message": "Internal server error"}';
        }

        location /api/v1/ {

            # задаёт протокол и адрес проксируемого сервера
            proxy_pass http://vertical_api:8080/;

            # задаёт текст, который нужно изменить в заголовках “Location” и “Refresh”
            proxy_redirect /api/v1/ /;

            # ограничивает HTTP-методы, доступные внутри location
            limit_except GET HEAD POST {
                deny all;
            }
        }
    }
}
